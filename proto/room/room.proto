syntax = "proto3";
import "playcards/proto/page/page.proto";

package room;

//结构体
message Room {
    int32 RoomID = 1;
    string Password = 2;
    repeated RoomUser UserList  =3;
    int32 MaxNumber  =4;
    int32 RoundNumber =5;
    int32 RoundNow  =6;
    int32 Status    =7;
    int32 GameType  =8;
    string GameParam = 9;
    int64 CreatedAt =10;
    int64 UpdatedAt =11;
    int32 RoomType   = 12;
    int32 PayerID = 13;
    int32 Giveup = 14;
    int32 UserID = 15;
}

message RoomUser{
    int32 UserID = 1;
    int32 Ready = 2;
    int32 Position = 3;
    string Icon =4;
    int32 Sex =5;
    int32 Role =6;
    string Nickname = 7;
    //int32 RoomID = 8;
    int32 Destroy = 9;
    repeated int32 Ids = 10;
}

message Position {
    //int32 RoomID = 1;
    int32 UserID = 2;
    int32 Index = 3;
    bool Ready = 4;
}

message GameUserResult {
    int32 UserID =1;
    int32 Win    =2;
    int32 Lost   =3;
    int32 Tie    =4;
    int32 Score  =5;
    string GameCardCount = 6;
    string Nickname = 7;
}

message RoomResults {
    int32 RoomID = 1;
    int32 RoundNumber = 2;
    int32 RoundNow = 3;
    int32 Status = 4;
    string Password = 5;
    repeated GameUserResult List = 6;
    int64 CreatedAt = 7;
    int32 GameType = 8;
    repeated int32 Ids = 9;
    int32 MaxPlayerNumber = 10;
    int32 PlayerNumberNow = 11;
}

message Feedback {
    int32  FeedbackID    =1;
    int32  UserID        =2;
    string Channel       =3;
    string Version       =4;
    string Content       =5;
    string MobileModel   =6;
    string MobileNetWork =7;
    string MobileOs      =8;
    string LoginIP       =9;
    int64 CreatedAt      =10;
    int64 UpdatedAt      =11;
}

//请求
message GiveUpGameRequest {
    string Password = 1;
}

message GiveUpVoteRequest{
    string Password = 1;
    int32 AgreeOrNot = 2;
}

message GiveUpGameResult {
    //int32 RoomID =1;
    int32 Status =2; 
    repeated UserState UserStateList = 3;
    repeated int32 Ids = 4;
}

message PageFeedbackListRequest{
    page.PageOption Page = 1;
    Feedback Feedback = 2;
}

message PageRoomResultListRequest{
    page.PageOption Page = 1;
    int32 GameType = 2;
}

message VoiceChatRequest{
    string  FileCode      =1;
    repeated int32 Ids = 2;
}

message CheckRoomExistRequest{
}

message RenewalRequest {
    string Password = 2;
}

message HeartbeatRequest{}

//回应
message PageFeedbackListReply {
    int32 Result = 1;
    repeated Feedback List = 2;
    int64 Count = 3;
}

message RoomResultListReply {
    repeated RoomResults List= 1;
    int64 Count = 2;
}

message CheckRoomExistReply{
    int32 Result = 1;
    int32 Status = 2;
    int32 Giveup = 3;
    Room Room = 4;
    GiveUpGameResult GiveupResult = 5;
    RoomResults GameResult = 6;
    int32 UserID = 7;
}

message RoomReply{
    int32 Result = 1;
}

message HeartbeatReply{}

//广播
message UserState {
    int32 State = 1;
    int32 UserID = 2;
}

message RenewalRoomReady {
    int32 RoomID = 1;
    string Password = 2;
    int32 Status    =3;
    repeated int32 Ids = 4;
}

message Shock {
    int32 UserIDFrom = 1;
    int32 UserIDTo = 2;
}

message UserConnection {
    int32 UserID = 1;
    int32 Status = 2;//1 重连 2掉线
    repeated int32 Ids = 3;
}

message VoiceChat{
    int32   UserID        =1;
    int32   RoomID        =2;
    string  FileCode      =3;
    repeated int32 Ids = 4;
}

service RoomSrv {
    rpc CreateRoom(Room) returns (RoomReply) {}
    rpc EnterRoom(Room) returns (RoomReply) {}
    rpc LeaveRoom(Room) returns (RoomReply) {}
    rpc SetReady(Room) returns (RoomReply) {}
    rpc TestClean(Room) returns (Room) {}
    rpc GiveUpGame(GiveUpGameRequest) returns (GiveUpGameResult) {}
    rpc GiveUpVote(GiveUpVoteRequest) returns (GiveUpVoteRequest) {}
    rpc Shock(RoomUser) returns (RoomReply) {}
    rpc Renewal(RenewalRequest) returns (RoomReply) {}
    rpc CreateFeedback(Feedback) returns (Feedback) {}
    rpc PageFeedbackList(PageFeedbackListRequest) returns (PageFeedbackListReply) {}
    rpc RoomResultList(PageRoomResultListRequest) returns (RoomResultListReply) {}
    rpc CheckRoomExist(Room) returns (CheckRoomExistReply) {}
    rpc VoiceChat(VoiceChatRequest) returns (RoomReply) {}
    rpc Heartbeat(HeartbeatRequest) returns (HeartbeatReply) {}
    rpc GetAgentRoomList(Room) returns (RoomResultListReply) {}
    rpc DelteAgentRoomRecord(Room) returns (RoomReply) {}
    rpc DisbandAgentRoom(Room) returns (RoomReply) {}
}



